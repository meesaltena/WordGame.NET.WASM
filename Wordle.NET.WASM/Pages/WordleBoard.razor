@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components.Forms;
@using Wordle.NET.Models;
@using System.Reflection;

<div id="wordle-container" @onkeydown="KeyDown" tabindex="0">
    <div id="wordle-board">
        @for (int guessNo = 0; guessNo < maxGuessCount; guessNo++)
        {
            <div class="row guessrow">
                @for (int letterNo = 0; letterNo < word.Length; letterNo++)
                {
                    @if (guessNo < guessesMade.Count())
                    {
                        <div class="@guessesMade[guessNo].letters[letterNo].cssClass" style="@guessesMade[guessNo].letters[letterNo].cssStyle">
                            @guessesMade[guessNo].letters[letterNo]
                        </div>
                    }
                    else
                    {
                        <div class="cell color-wrong"></div>
                    }
                }
            </div>
        }
    </div>

    <div id="wordle-input" class="@inputRowClass">
        <div class="row">
            @for (int j = 0; j < inputWord.Length; j++)
            {
                // show typed letter in red if it has already been wrongly guessed before
                @if (guessesMade.Any(g => g.letters.Where(l => l == inputWord[j] && l.color == Color.Wrong).Any() && 
                                         !g.letters.Where(l => l == inputWord[j] && l.color == Color.Close).Any()))
                {
                    <div class="cell color-warning">@inputWord[j]</div>
                }
                else
                {
                    <div class="cell color-wrong">@inputWord[j]</div>
                }
            }
            @if (inputWord.Length < word.Length)
            {
                @for (int j = 0; j < (word.Length - inputWord.Length); j++)
                {
                    <div class="cell color-wrong"></div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<Guess> OnGuessesCallback { get; set; }
    [Parameter]
    public EventCallback<string> OnInvalidGuessCallback { get; set; }
    [Parameter]
    public List<string> allowedGuesses { get; set; } = new();
    [Parameter]
    public string word { get; set; } = string.Empty;

    public int maxGuessCount { get; set; } = 6;
    public string inputWord { get; set; } = string.Empty;

    private List<Guess> guessesMade = new();
    private string inputRowClass { get; set; } = string.Empty;

    private async Task putGuess(string input)
    {
        if (guessesMade.Count() < maxGuessCount)
        {
            Guess g = new Guess(input, word);
            guessesMade.Add(g);
            inputWord = string.Empty;

            //set letter color and reveal with spin animation
            for (int i = 0; i < g.letters.Count(); i++)
            {
                await InvokeAsync(async () =>
                {
                    g.SetLetterColor(i);
                    g.SetSpinAnimation(i);
                    StateHasChanged();
                    await Task.Delay(200);
                });
            }

            if (g.IsCorrect())
            {
                for (int i = 0; i < g.letters.Count(); i++)
                {
                    await InvokeAsync(async () =>
                    {
                        g.SetWinAnimation(i);
                        StateHasChanged();
                        await Task.Delay(100);
                    });
                }
                await OnGuessesCallback.InvokeAsync(g);
            }
        }

        if (guessesMade.Count() == maxGuessCount)
        {
            await OnGuessesCallback.InvokeAsync();
        }
    }

    protected async Task KeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                if (inputWord.Length < word.Length)
                {
                    await ShowInvalidGuessAnimationAndToast("Not enough letters.");
                    return;
                }
                if (!allowedGuesses.Contains(inputWord.ToUpperInvariant()))
                {
                    await ShowInvalidGuessAnimationAndToast("Not in word list.");
                    return;
                }

                await putGuess(inputWord.ToUpperInvariant());
                return;

            case "Backspace":
                if (inputWord.Length > 0)
                {
                    inputWord = inputWord.Remove(inputWord.Length - 1);
                }
                return;
            default:
                if (e.Key.Length == 1 && inputWord.Length < word.Length && Regex.IsMatch(e.Key, "^[a-zA-Z]"))
                {
                    inputWord += e.Key.ToUpper();
                }
                break;
        }
    }

    private async Task ShowInvalidGuessAnimationAndToast(string message)
    {
        inputRowClass = "invalid-guess-anim";
        await InvokeAsync(async () =>
        {
            await OnInvalidGuessCallback.InvokeAsync(message);
            StateHasChanged();
            await Task.Delay(1000);
            inputRowClass = "";
            StateHasChanged();
        });
    }

    protected override Task OnInitializedAsync()
    {
        Console.WriteLine(word);
        return base.OnInitializedAsync();
    }
}
