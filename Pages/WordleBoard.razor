@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components.Forms;
@using Wordle.NET.Models;

<div id="wordle-container" @onkeydown="KeyDown" tabindex="0">
    <div id="wordle-board">
            @for (int guessNo = 0; guessNo < maxGuessCount; guessNo++)
            {
                <div class="row guessrow">
                    @for (int letterNo = 0; letterNo < word.Length; letterNo++)
                    {
                        @if (guessNo < guesses.Count())
                        {
                            <div class="@guesses[guessNo].letters[letterNo].CssColor() spin-anim">@guesses[guessNo].letters[letterNo]</div>
                        }
                        else
                        {
                            <div class="cell color-wrong"></div>
                        }
                    }
                </div>
            }
    </div>

    <div id="wordle-input">
        <div class="row">
            @for (int j = 0; j < inputWord.Length; j++)
            {
                <div class="cell color-wrong">@inputWord[j]</div>
            }
            @if (inputWord.Length < word.Length)
            {
                @for (int j = 0; j < (word.Length - inputWord.Length); j++)
                {
                    <div class="cell color-wrong"></div>
                }
            }
        </div>
    </div>
</div>
<style>
    .spin-anim {
        opacity: 0;
        animation: spin 0.5s forwards;
    }

    @@keyframes spin {
        0% {
            opacity: 0;
            transform: rotateY(180deg);
        }

        100% {
            opacity: 1;
            transform: rotateY(0deg);
        }
    }

    .guessrow div:nth-child(1) {
        animation-delay: 0.0s
    }

    .guessrow div:nth-child(2) {
        animation-delay: 0.2s
    }

    .guessrow div:nth-child(3) {
        animation-delay: 0.4s
    }

    .guessrow div:nth-child(4) {
        animation-delay: 0.6s
    }

    .guessrow div:nth-child(5) {
        animation-delay: 0.8s
    }
</style>
@code {
    [Parameter]
    public int maxGuessCount { get; set; } = 6;
    public string inputWord { get; set; } = string.Empty;
    private string word = "APPLE";
    private bool boardReady = false;


    List<Guess> guesses = new();


    private void putGuess(string input)
    {
        if (guesses.Count() < maxGuessCount)
        {
            Guess g = new Guess(input, word);
            guesses.Add(g);
            inputWord = string.Empty;
        }
    }


    protected void KeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                if (inputWord.Length == word.Length)
                {
                    putGuess(inputWord);
                }
                else
                {
                    // show shake animation
                }
                break;
            case "Backspace":
                if (inputWord.Length > 0)
                {
                    inputWord = inputWord.Remove(inputWord.Length - 1);
                }
                break;
            default:
                if (e.Key.Length == 1 && inputWord.Length < word.Length)
                {
                    inputWord += e.Key.ToUpper();
                    Console.WriteLine(inputWord);
                }
                break;
        }
    }

    protected override Task OnInitializedAsync()
    {
        boardReady = true;
        return base.OnInitializedAsync();
    }
}
