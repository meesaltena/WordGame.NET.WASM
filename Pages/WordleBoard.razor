@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components.Forms;
@using Wordle.NET.Models;
@using System.Reflection;

<div id="wordle-container" @onkeydown="KeyDown" tabindex="0">
    <div id="wordle-board">
            @for (int guessNo = 0; guessNo < maxGuessCount; guessNo++)
            {
            <div class="row guessrow">
                    @for (int letterNo = 0; letterNo < word.Length; letterNo++)
                    {
                        @if (guessNo < guesses.Count())
                        {
                            <div class="@guesses[guessNo].letters[letterNo].cssClass" style="@guesses[guessNo].letters[letterNo].cssStyle">
                                @guesses[guessNo].letters[letterNo]
                            </div>

                        }
                        else
                        {
                            <div class="cell color-wrong"></div>
                        }
                    }
            </div>
            }
    </div>

    <div id="wordle-input">
        <div class="row">
            @for (int j = 0; j < inputWord.Length; j++)
            {
                // show typed letter in red if it has already been wrongly guessed
                @if(guesses.Any(g => g.letters.Where(l => l == inputWord[j] && l.color == Color.Wrong).Any()))
                {
                    <div class="cell color-warning">@inputWord[j]</div>
                }
                else
                {
                    <div class="cell color-wrong">@inputWord[j]</div>
                }
            }
            @if (inputWord.Length < word.Length)
            {
                @for (int j = 0; j < (word.Length - inputWord.Length); j++)
                {
                    <div class="cell color-wrong"></div>
                }
            }
        </div>
    </div>
</div>
<style>
    *:focus {
        outline: none;
    }
    .spin-anim {
        animation: spin 0.5s forwards;
    }
    .win-anim {
        animation: upanddown 0.5s forwards;
    }

    @@keyframes upanddown {
        0% {
            opacity: 1;
            transform: translateY(30%);
        }

        25% {
            transform: translateY(-30%);
        }

        50% {
            transform: translateY(-35%);
        }

        75% {
            opacity: 1;
            transform: translateY(15%);
        }

        100% {
            opacity: 1;
            transform: translateY(0%);
        }
    }

    @@keyframes spin {
        0% {
            opacity: 0;
            transform: rotateY(180deg);

        }

        100% {
            opacity: 1;
            transform: rotateY(0deg);
        }
    }
</style>

@code {
    [Parameter]
    public EventCallback<Guess> OnGuessesCallback { get; set; }
    [Parameter]
    public int maxGuessCount { get; set; } = 6;
    public string inputWord { get; set; } = string.Empty;
    private string word { get; set; } = string.Empty;
    private bool boardReady = false;
    private bool won = false;
    private Dictionary<(int, int), string> letterClasses = new Dictionary<(int, int), string>();
    List<Guess> guesses = new();
    private List<string> words { get; set; } = new();

    private async Task putGuess(string input)
    {
        if (guesses.Count() < maxGuessCount)
        {
            Guess g = new Guess(input, word);
            guesses.Add(g);
            inputWord = string.Empty;

            //set letter color and reveal with spin animation
            for(int i = 0; i < g.letters.Count(); i++)
            {
                await InvokeAsync(async () =>
                {
                    g.SetLetterColor(i);
                    g.SetSpinAnimation(i);
                    StateHasChanged(); 
                    await Task.Delay(200);
                });   
            }

            if (g.IsCorrect())
            {
                for (int i = 0; i < g.letters.Count(); i++)
                {
                    await InvokeAsync(async () =>
                    {
                        g.SetWinAnimation(i);
                        StateHasChanged();
                        await Task.Delay(100);
                    });
                }

                await OnGuessesCallback.InvokeAsync(g); 
            }
        } else
        {
            await OnGuessesCallback.InvokeAsync();
        }
    }

    protected async Task KeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                if (inputWord.Length == word.Length && words.Contains(inputWord.ToLower()))
                {
                    await putGuess(inputWord.ToUpper());
                }
                else
                {
                    // show shake animation
                }
                break;
            case "Backspace":
                if (inputWord.Length > 0)
                {
                    inputWord = inputWord.Remove(inputWord.Length - 1);
                }
                break;
            default:
                if (e.Key.Length == 1 && inputWord.Length < word.Length)
                {
                    //TODO allow only a-z
                    inputWord += e.Key.ToUpper();
                    Console.WriteLine(inputWord);
                }
                break;
        }
    }

    private void GetWordsFromAssembly()
    {
        try
        {
            const string wordsResource = "Wordle.NET.WASM.Words.FiveLetterWords.txt";
            Assembly assembly = Assembly.GetExecutingAssembly();
            {
                using Stream stream = assembly.GetManifestResourceStream(wordsResource)!;
                if (stream is null)
                {
                    Console.WriteLine("Error: Missing \"FiveLetterWords.txt\" embedded resource.");
                    Console.WriteLine("Press enter to continue...");
                    return;
                }
                using StreamReader streamReader = new(stream);
                while (!streamReader.EndOfStream)
                {
                    string line = streamReader.ReadLine()!;
                    words.Add(line);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
    }

    protected override Task OnInitializedAsync()
    {
        GetWordsFromAssembly();
        word = words[Random.Shared.Next(words.Count)].ToUpperInvariant();
        Console.WriteLine(word);
        boardReady = true;
        return base.OnInitializedAsync();
    }
}
