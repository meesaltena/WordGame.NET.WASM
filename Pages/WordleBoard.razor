@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components.Forms
@using Wordle.NET.WASM.Models

<div id="wordle-container" @onkeydown="KeyDown" tabindex="0">
    <div id="wordle-board">
        @if (boardReady)
        {
            @for (int guessNo = 0; guessNo < guesses.Count(); guessNo++)
            {
                <div class="row">
                    @for (int letterNo = 0; letterNo < guesses[guessNo].letters.Count(); letterNo++)
                    {
                        <div class="@guesses[guessNo].letters[letterNo].CssColor()">@guesses[guessNo].letters[letterNo]</div>
                    }
                </div>
            }


            @* Placeholder rows *@
            @for (int p = 0; p < maxGuessCount-guesses.Count(); p++)
            {
                <div class="row">
                    @for (int letterNo = 0; letterNo < word.Length; letterNo++)
                    {
                        <div class="cell color-wrong"></div>
                    }
                </div>
            }
        }
    </div>

    <div id="wordle-input">
        <div class="row">
            @for (int j = 0; j < inputWord.Length; j++)
            {
                <div class="cell color-wrong">@inputWord[j]</div>
            }
            @if (inputWord.Length < word.Length)
            {
                @for (int j = 0; j < (word.Length - inputWord.Length); j++)
                {
                    <div class="cell color-wrong"></div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int maxGuessCount { get; set; } = 6;
    public string inputWord { get; set; } = string.Empty;
    // private string word = "APPLE";
    // private string word = "AMPLE";
    // private string word = "STEAL";
    private string word = "CREPE";
    private string emptyGuess = "     ";
    private int guessesMade = 0;
    bool boardReady = false;


    List<Guess> guesses = new();


    private void putGuess(string input)
    {
        if (guesses.Count() < maxGuessCount)
        {
            Guess g = new Guess(input, word);
            guesses.Add(g);
            // guesses[ind] = inputWord;


            inputWord = string.Empty;
            //  SetGuessColor(ind);
            guessesMade++;

            // ComputeColors(inputWord, word);
        }


    }


    // private void ComputeColors(string input, string word)
    // {


    // }



    protected void KeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                if (inputWord.Length == word.Length)
                {
                    putGuess(inputWord);
                }
                else
                {
                    // show shake animation
                }
                break;
            case "Backspace":
                if (inputWord.Length > 0)
                {
                    inputWord = inputWord.Remove(inputWord.Length - 1);
                }
                break;
            default:
                if (e.Key.Length == 1 && inputWord.Length < word.Length)
                {
                    inputWord += e.Key.ToUpper();
                    Console.WriteLine(inputWord);
                }
                break;
        }
    }

    public IList<int> AllIndexOf(string text, string str, StringComparison comparisonType = StringComparison.InvariantCultureIgnoreCase)
    {
        IList<int> allIndexOf = new List<int>();
        int index = text.IndexOf(str, comparisonType);
        while (index != -1)
        {
            allIndexOf.Add(index);
            index = text.IndexOf(str, index + 1, comparisonType);
        }
        return allIndexOf;
    }


    // char GetCharacter(int guessNo, int letterNo)
    // {
    //     return guesses[guessNo][letterNo];
    // }

    protected override Task OnInitializedAsync()
    {
        // cellColors = new string[6, 6];
        // for (int i = 0; i < 6; i++)
        // {
        //     for (int j = 0; j < 6; j++)
        //     {
        //         cellColors[i, j] = "cell color-wrong";
        //     }
        // }

        // guesses = Enumerable.Range(0, maxGuessCount).Select(_ => emptyGuess).ToList();
        // Enumerable.Range(0, maxGuessCount).ToList().ForEach(i =>
        // {
        //     alreadyHintedLettersForGuess.Add(i, new List<char>());
        // });
        boardReady = true;
        return base.OnInitializedAsync();
    }
}
