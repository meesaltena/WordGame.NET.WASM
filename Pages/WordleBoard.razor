@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components.Forms

<div id="wordle-container" @onkeydown="KeyDown" tabindex="0">
    <div id="wordle-board">

        @for (int guessNo = 0; guessNo < maxGuessCount; guessNo++)
        {
            <div class="row">
                @for (int letterNo = 0; letterNo < word.Length; letterNo++)
                {
                    <div class="@GetCellColor(guessNo,letterNo)">@GetCharacter(guessNo, letterNo)</div>
                }
            </div>
        }
    </div>

    <div id="wordle-input">

        <div class="row">
            @for (int j = 0; j < inputWord.Length; j++)
            {
                <div class="cell color-wrong">@inputWord[j]</div>
            }
            @if (inputWord.Length < word.Length)
            {
                @for (int j = 0; j < (word.Length - inputWord.Length); j++)
                {
                    <div class="cell color-wrong"></div>
                }
            }
        </div>
    </div>

</div>
@code {
    [Parameter]
    public int maxGuessCount { get; set; } = 6;
    public string inputWord { get; set; } = string.Empty;
    private string word = "AMPLE";
    private string emptyGuess = "     ";

    List<string> guesses = new();

    string GetCellColor(int guessNo, int letterNo)
    {
        string guess = guesses[guessNo];


        char currentLetter = guess[letterNo];

        var currentLetterMatchIndexes = AllIndexOf(word, currentLetter.ToString());

        var charCountInGuess = AllIndexOf(guess, currentLetter.ToString());

        if (currentLetterMatchIndexes.Count == 0)
            return "cell color-wrong";


        if (currentLetterMatchIndexes.Count != charCountInGuess.Count)
        {
            // if (word[m.First()] == c)
            // if (word[m.First()] == gue)
            if (currentLetter == word[letterNo])
            {
                return "cell color-correct";
            } else
            {
                return "cell color-wrong";
            }
         
            // if (word[m.First()] == c && m.Contains(c) && charCountInGuess.Contains(c))
            // {
            //     return "cell color-correct"; 
            // }

            
            // if (m.Count == charCountInGuess.Count)
            // {
            //     if (word[m.First()] == c)
            //     {
            //         return "cell color-correct";
            //     }
            //     return "cell color-close";
            // }
            // else if (m.Count < charCountInGuess.Count)
            // {
            //     if (m.Contains(i))
            //     {
            //         return "cell color-correct";
            //     }
            //     else
            //     {
            //         return "cell color-wrong";
            //     }
            // }

        }


        // if (m.Count == 1)
        // {
        //     if (word[m.First()] == c)
        //     {
        //         return "cell color-correct";
        //     }
        //     return "cell color-close";
        // }

        // if (m.Count > 1)
        // {
        //     if (m.Count == charCountInGuess.Count)
        //     {
        //         if (word[m.First()] == c)
        //         {
        //             return "cell color-correct";
        //         }
        //         return "cell color-close";
        //     }
        //     else if (m.Count < charCountInGuess.Count)
        //     {
        //         if (m.Contains(i))
        //         {
        //             return "cell color-correct";
        //         }
        //         else
        //         {
        //             return "cell color-wrong";
        //         }
        //     }

        // }

        return "cell color-wrong";

        // if(c == word[j])
        // {
        //     return "cell color-correct";
        // }
        // else if (word.Contains(c)) // This is wrong
        // {
        //     return "cell color-close";
        // }
        // else
        // {
        //     return "cell color-wrong";
        // }
        // if ()
        // return "cell color-wrong";
    }

    private void putGuess(string g)
    {
        int ind = guesses.IndexOf(emptyGuess);
        if (ind > -1)
        {
            guesses[ind] = inputWord;
            inputWord = string.Empty;
        }
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine("KeyDown");

        switch (e.Key)
        {
            case "Enter":
                if (inputWord.Length == word.Length)
                {
                    putGuess(inputWord);
                }
                else
                {
                    // show shake animation
                }
                break;
            case "Backspace":
                if (inputWord.Length > 0)
                {
                    inputWord = inputWord.Remove(inputWord.Length - 1);
                }
                break;
            default:
                if (e.Key.Length == 1 && inputWord.Length < word.Length)
                {
                    inputWord += e.Key.ToUpper();
                    Console.WriteLine(inputWord);
                }
                break;
        }
    }

    public IList<int> AllIndexOf(string text, string str, StringComparison comparisonType = StringComparison.InvariantCultureIgnoreCase)
    {
        IList<int> allIndexOf = new List<int>();
        int index = text.IndexOf(str, comparisonType);
        while (index != -1)
        {
            allIndexOf.Add(index);
            index = text.IndexOf(str, index + 1, comparisonType);
        }
        return allIndexOf;
    }


    char GetCharacter(int guessNo, int letterNo)
    {
        return guesses[guessNo][letterNo];
    }

    protected override Task OnInitializedAsync()
    {
        guesses = Enumerable.Range(0, maxGuessCount).Select(_ => emptyGuess).ToList();
        // inputWord = "ADIEU";
        return base.OnInitializedAsync();
    }
}
