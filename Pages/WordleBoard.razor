@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components.Forms

<div id="wordle-container" @onkeydown="KeyDown" tabindex="0">
    <div id="wordle-board">

        @for (int i = 0; i < maxGuessCount; i++)
        {
            <div class="row">
                @for (int j = 0; j < word.Length; j++)
                {
                    <div class="@GetCellColor(i,j)">@GetChar(i, j)</div>
                }
            </div>
        }
    </div>

    <div id="wordle-input">

        <div class="row">
            @for (int j = 0; j < inputWord.Length; j++)
            {
                <div class="cell color-wrong">@inputWord[j]</div>
            }
            @if (inputWord.Length < word.Length)
            {
                @for (int j = 0; j < (word.Length - inputWord.Length); j++)
                {
                    <div class="cell color-wrong"></div>
                }
            }
        </div>
    </div>

</div>
@code {
    [Parameter]
    public int maxGuessCount { get; set; } = 6;
    public string inputWord { get; set; } = string.Empty;
    private string word = "APMLY";
    private string emptyGuess = "     ";

    List<string> guesses = new();

    string GetCellColor(int i, int j)
    {
        return "cell color-wrong";
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine("KeyDown");

        switch (e.Key)
        {
            case "Enter":
                if(inputWord.Length == word.Length)
                {
                    int ind = guesses.IndexOf(emptyGuess);
                    if(ind > -1)
                    {
                        guesses[ind] = inputWord;
                        inputWord = string.Empty;
                    }
                } else
                {
                    // show shake animation
                }
                break;
            case "Backspace":
                if (inputWord.Length > 0)
                {
                    inputWord = inputWord.Remove(inputWord.Length - 1);
                }
                break;
            default:
                if (e.Key.Length == 1 && inputWord.Length < word.Length)
                {
                    inputWord += e.Key.ToUpper();
                    Console.WriteLine(inputWord);
                }
                break;
        }
    }

    public IList<int> AllIndexOf(string text, string str, StringComparison comparisonType = StringComparison.InvariantCultureIgnoreCase)
    {
        IList<int> allIndexOf = new List<int>();
        int index = text.IndexOf(str, comparisonType);
        while (index != -1)
        {
            allIndexOf.Add(index);
            index = text.IndexOf(str, index + 1, comparisonType);
        }
        return allIndexOf;
    }


    char GetChar(int i, int j)
    {
        return guesses[i][j];
    }

    protected override Task OnInitializedAsync()
    {
        guesses = Enumerable.Range(0, maxGuessCount).Select(_ => emptyGuess).ToList();
        inputWord = "ADIEU";
        return base.OnInitializedAsync();
    }
}
