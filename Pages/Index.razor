@page "/"
@using System.Reflection
@using Wordle.NET.Models
@inject IJSRuntime JS
@implements IDisposable
@inject NotifierService Notifier
@inject TimerService Timer


<div>
    <div id="header-text" class="">
        <div class="header-row">
            <h1 @onclick="HeaderClicked">Wordle.NET.WASM</h1>
            <h3>build @BuildNumber</h3>
        </div>
    </div>


    <dialog class="game-won-modal">
        <p>Congratulations!</p>
        <p>You won! The word was @WinningGuess!</p>
        <button @onclick="async () =>await  CloseModal(false)" class="modal-close-button">Nice, we'll take that</button>
        <button @onclick="async () => await CloseModal(true)" class="modal-close-button">Run it back</button>
    </dialog>
    <WordleBoard showWonAnimation="showWonAnimation" @key="boardId" OnGuessesCallback="(value) => GuessedCorrectCallback(value)" />

</div>

<script>
    window.HideGameWonModal = () => {
        var modal = document.querySelector('.game-won-modal');
        modal.close();
        console.log("hide");
    };
    window.ShowGameWonModal = () => {
        var modal = document.querySelector('.game-won-modal');
        modal.showModal();
        console.log("show");
    };
</script>

@code {
    string BuildNumber { get; set; } = string.Empty;
    private Guid boardId = Guid.NewGuid();
    private Guess? WinningGuess { get; set; } = null;
    private (string key, int value) lastNotification;
    public bool showWonAnimation { get; set; } = false;
    protected override Task OnInitializedAsync()
    {
        Notifier.Notify += OnNotify;
        BuildNumber = typeof(Program).Assembly.GetName().Version!.ToString();
        return base.OnInitializedAsync();
    }

    private void HeaderClicked()
    {
        boardId = Guid.NewGuid();
        Console.WriteLine("Clicked");
    }


    public async Task OnNotify(string key, int value)
    {
        await InvokeAsync(async () =>
        {
            await JS.InvokeVoidAsync("ShowGameWonModal");
            lastNotification = (key, value);
            StateHasChanged();
        });
        Timer.Stop();
    }

    private void StartTimer()
    {
        _ = Task.Run(() => Timer.Start(TimeSpan.FromSeconds(1.5)));
    }


    private async Task CloseModal(bool reset)
    {
        if (reset)
        {
            boardId = Guid.NewGuid();
            showWonAnimation = false;
        }
        await JS.InvokeVoidAsync("HideGameWonModal");
    }

    private void GuessedCorrectCallback(Guess g)
    {

        showWonAnimation = true;
        StartTimer();
        // if guess is correct, show animation
        WinningGuess = g;

    }

    public void Dispose() => Notifier.Notify -= OnNotify;
}