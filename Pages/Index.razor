@page "/"
@using System.Reflection
@using Wordle.NET.Models
@inject IJSRuntime JS

<div>
<div id="header-text" class="">
    <div class="header-row">
        <h1 @onclick="HeaderClicked">Wordle.NET.WASM</h1>
        <h3>build @BuildNumber</h3>
    </div>
</div>

    @if(WinningGuess != null)
    {

    }

    <dialog class="game-won-modal">
        <p>Congratulations!</p>
        <p>You won! The word was @WinningGuess!</p>
        <button @onclick="async () =>await  CloseModal(false)" class="modal-close-button">Nice, we'll take that</button>
        <button @onclick="async () => await CloseModal(true)" class="modal-close-button">Run it back</button>
    </dialog>
    <WordleBoard @key="boardId" OnGuessesCallback="async (value) => await GuessedCallback(value)" />

</div>

<script>
    // const 
    // const openButton = document.querySelector('.open-button');
     

    // openButton.addEventListener('click', () => {
    //     modal.showModal();
    // });
    // const closeButton = document.querySelector('.modal-close-button');
    // closeButton.addEventListener('click', () => {
    //     modal.close();
    // });
    window.HideGameWonModal = () => {
        var modal = document.querySelector('.game-won-modal');
        modal.close();
        console.log("hide");
    };
    window.ShowGameWonModal = () => {
      var modal = document.querySelector('.game-won-modal');
      modal.showModal();
      console.log("show");
    };
</script>

@code {
    string BuildNumber { get; set; } = string.Empty;
    private Guid boardId = Guid.NewGuid();
    // private bool ShowGameWonModal { get; set; } = false;
    private Guess? WinningGuess { get; set; } = null;

    protected override Task OnInitializedAsync()
    {
        BuildNumber = typeof(Program).Assembly.GetName().Version!.ToString();
        return base.OnInitializedAsync();
    }

    private void HeaderClicked()
    {
        boardId = Guid.NewGuid();
        Console.WriteLine("Clicked");
    }

    private async Task CloseModal(bool reset)
    {
        if (reset)
        {
            boardId = Guid.NewGuid();
        }
        await JS.InvokeVoidAsync("HideGameWonModal");
    }

    private async Task GuessedCallback(Guess g)
    {
        if (g.IsCorrect())
        {
            Console.WriteLine("Correct!");
            // if guess is correct, show animation
            WinningGuess = g;
            await JS.InvokeVoidAsync("ShowGameWonModal");
        }

    }
}